name: qcs410gadget # you probably want to 'snapcraft register <name>'
base: core20 # the base snap is the execution environment for this snap
version: '0.1' # just for humans, typically '1.2+git' or '1.3.2'
summary: Single-line elevator pitch for your amazing snap # 79 char long summary
description: |
  This is my-snap's description. You have a paragraph or two to tell the
  most important story about your snap. Keep it under 100 words though,
  we live in tweetspace and your description wants to look good in the snap
  store.
type: gadget
grade: stable # must be 'stable' to release into candidate/stable channel
confinement: devmode # use 'strict' once you have the right plugs and slots

architectures:
  - build-on: [amd64, arm64]
    run-on: arm64


parts:
  prebuilt:
    plugin: dump
    source: prebuilt
    organize:
      '*': blobs/
    stage:
      - blobs/flashall

  edk2:
    # See 'snapcraft plugins'
    plugin: nil
    #source: https://git.codelinaro.org/clo/le/abl/tianocore/edk2
    source: https://git.launchpad.net/~ondrak/+git/edk2
    build-packages: [clang, make, g++-aarch64-linux-gnu, python2]
    source-type: git
    source-depth: 1
    source-tag: LE.UM.6.2.4.r1-uc
    #source-tag: LE.UM.6.2.4.r1-04300-QCS610.0
    override-build: |
      git apply $SNAPCRAFT_PROJECT_DIR/FITSIGNATURE.patch
      if [ ! -e /usr/bin/python ]; then
          ln -s /usr/bin/python2 /usr/bin/python
      fi 
      export TARTGET_ARCHITECTURE=aarch64
      export BUILDDIR=$SNAPCRAFT_PART_BUILD
      export BOOTLOADER_OUT=${SNAPCRAFT_PART_BUILD}/out
      export ENABLE_LE_VARIANT=true
      export ENABLE_SYSTEMD_BOOTSLOT=1
      export ENABLE_DM_MOD_FOR_KERNEL5_4=0
      export VERIFIED_BOOT_LE=1
      export VERITY_LE=0
      export EDK_TOOLS_PATH=${SNAPCRAFT_PART_BUILD}/BaseTools
      export EARLY_ETH_ENABLED=0
      #export OVERRIDE_ABL_LOAD_ADDRESS=$ABL_LOAD_ADDRESS
      export TARGET_SUPPORTS_EARLY_USB_INIT=0
      export NAND_SQUASHFS_SUPPORT=0
      export BOOTLOADER_PLATFORM=msmcobalt
      export CLANG_BIN=/usr/lib/llvm-10/bin/
      export CLANG_PREFIX=/usr/bin/aarch64-linux-gnu-
      export SIGNED_KERNEL=1
      export USER_BUILD_VARIANT=0
      export DEVICE_STATUS=DEFAULT_UNLOCK=true
      make -j 1 \
          'VERIFIED_BOOT_LE=1' \
#          'INIT_BIN_LE=\"/sbin/init\"' 
          -f makefile all
      mkdir -p ${SNAPCRAFT_PART_INSTALL}/blobs
      cp ${SNAPCRAFT_PART_BUILD}/Build/DEBUG_CLANG35/FV/abl.elf  ${SNAPCRAFT_PART_INSTALL}/blobs/abl.elf

  partitioning-tool:
     plugin: dump
     source: https://github.com/kubiko/partitioning_tool.git
     source-depth: 1
     source-type: git
     organize:
       LICENSE: LICENSE_for_ptool
     prime:
       - -*

  emmc-gpt-partition:
    plugin: nil
    source: qdl
    after:
      - partitioning-tool
    override-build: |
      echo "Updating partition.xml sizes from gadget.yaml"
      sizes=$(grep -e 'size' ${SNAPCRAFT_PROJECT_DIR}/gadget.yaml | awk -F ": " '{ print $2}')
      for name in $(grep -e '- name:' ${SNAPCRAFT_PROJECT_DIR}/gadget.yaml | awk -F ": " '{ print $2}')
      do
        set $sizes; size=$1; shift; sizes="$*";
        case $size in
             (0)  size="0" ;;
             (*G | *g) size=$(expr $(echo $size | sed -e 's/G//g' -e 's/g//g') \* 1024 \* 1024) ;;
             (*M | *m) size=$(expr $(echo $size | sed -e 's/M//g' -e 's/m//g') \* 1024) ;;
             (*K | *k) size=$(echo $size | sed -e 's/K//g' -e 's/k//g') ;;
             (*) size=$(expr $size / 1024) ;;
        esac
        sed -i \
            -e 's/\"'"${name}"'-size\"/\"'"${size}"'\"/g' \
            partition.xml
      done
      python3 ${SNAPCRAFT_STAGE}/ptool.py -x partition.xml -t .
      [ -e rawprogram0_BLANK_GPT.xml ] && rm rawprogram*_BLANK_GPT.xml
      [ -e rawprogram0_WIPE_PARTITIONS.xml ] && rm rawprogram*_WIPE_PARTITIONS.xml
      cp rawprogram*.xml ${SNAPCRAFT_PART_INSTALL}
      cp patch*.xml ${SNAPCRAFT_PART_INSTALL}
      cp gpt_* ${SNAPCRAFT_PART_INSTALL}
    organize:
      '*': blobs/
    stage:
      - blobs/gpt_b*.bin
      - blobs/gpt_main*.bin
      - blobs/patch*.xml
      - blobs/rawprogram*.xml


  emmc-build-blobs:
    plugin: dump
    source: blobs
    organize:
      "*": blobs/

  snap-boot-sel-env:
    plugin: nil
    source: snap-boot-sel
    source-type: local
    build-packages: [wget]
    override-pull: |
      snapcraftctl pull
      wget https://raw.githubusercontent.com/snapcore/snapd/master/include/lk/snappy_boot_v2.h
      wget https://raw.githubusercontent.com/snapcore/snapd/master/include/lk/snappy_boot_common.h
    override-build: |
      gcc lk-boot-env.c -I/usr/include/ -o lk-boot-env
      # configure initial boot environment
      ./lk-boot-env --runtime --write ${SNAPCRAFT_PART_INSTALL}/snapbootsel.bin \
       --bootimg-file boot.img \
      $( ./parse-yaml.sh ${SNAPCRAFT_PROJECT_DIR}/gadget.yaml runtime )
      ./lk-boot-env --recovery --write ${SNAPCRAFT_PART_INSTALL}/snaprecoverysel.bin \
       --bootimg-file boot.img \
      $( ./parse-yaml.sh ${SNAPCRAFT_PROJECT_DIR}/gadget.yaml recovery )
            ln -sf snaprecoverysel.bin ${SNAPCRAFT_PART_INSTALL}/lk.conf
    organize:
      snapbootsel.bin: blobs/snapbootsel.bin
      
  sign-abl:
    plugin: dump
    source: sectools
#    after:
#        - abl
#    override-pull: |
#      git clone git+ssh://git.launchpad.net/~ondrak/+git/sectools -b master SecTools || true
#      cp ${SNAPCRAFT_STAGE}/blobs/abl.elf.nonsecure abl.elf
#    override-build: |
#      cp ${SNAPCRAFT_STAGE}/blobs/abl.elf 
#      VERSION="18-1"
#      if [ -d sectools ]; then
#          python2 sectools/sectools.py secimage \
#              -v \
#              -c config/sdm6150/sm6150_secimage.xml \
#              -g abl \
#              -i abl.elf \
#              -o ${SNAPCRAFT_PART_INSTALL} \
#              -sa
         #ln -f ${SNAPCRAFT_PART_INSTALL}/sdm6150/abl/abl.elf ${SNAPCRAFT_PART_INSTALL}/abl.elf.signed
          #snapcraftctl set-version ${VERSION}
#     else
          #ln -f ${SNAPCRAFT_STAGE}/blobs/abl.elf.nonsecure ${SNAPCRAFT_PART_INSTALL}/abl.elf
          #snapcraftctl set-version ${VERSION}-unsigned
#          echo "do nothing"
#      fi
#      organize:
#        '*': blobs/
#        sdm6150/abl/abl.elf: blobs/abl.elf
#      stage:
#        - blobs/abl.elf*  
